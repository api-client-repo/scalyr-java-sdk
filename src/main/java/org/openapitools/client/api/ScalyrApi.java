/*
 * Scalyr API
 * You can use the Scalyr API to send and retrieve log data directly from Scalyr servers, as well as manage configuration files. It is usually most convenient to use the Scalyr Agent to send log files, and to view logs on the web site.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import Scalyr.ApiCallback;
import Scalyr.ApiClient;
import Scalyr.ApiException;
import Scalyr.ApiResponse;
import Scalyr.Configuration;
import Scalyr.Pair;
import Scalyr.ProgressRequestBody;
import Scalyr.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.UpdateUsers;
import org.openapitools.client.model.UsersToGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ScalyrApi {
    private ApiClient localVarApiClient;

    public ScalyrApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ScalyrApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addUserToGroup
     * @param usersToGroupRequest Users that need to be added to the group (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call addUserToGroupCall(UsersToGroup usersToGroupRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = usersToGroupRequest;

        // create path and map variables
        String localVarPath = "/addUsersToGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addUserToGroupValidateBeforeCall(UsersToGroup usersToGroupRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'usersToGroupRequest' is set
        if (usersToGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'usersToGroupRequest' when calling addUserToGroup(Async)");
        }
        

        okhttp3.Call localVarCall = addUserToGroupCall(usersToGroupRequest, _callback);
        return localVarCall;

    }

    /**
     * This method adds one or more users to a group.
     * This method adds one or more users to a group.
     * @param usersToGroupRequest Users that need to be added to the group (required)
     * @return UpdateUsers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UpdateUsers addUserToGroup(UsersToGroup usersToGroupRequest) throws ApiException {
        ApiResponse<UpdateUsers> localVarResp = addUserToGroupWithHttpInfo(usersToGroupRequest);
        return localVarResp.getData();
    }

    /**
     * This method adds one or more users to a group.
     * This method adds one or more users to a group.
     * @param usersToGroupRequest Users that need to be added to the group (required)
     * @return ApiResponse&lt;UpdateUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UpdateUsers> addUserToGroupWithHttpInfo(UsersToGroup usersToGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(usersToGroupRequest, null);
        Type localVarReturnType = new TypeToken<UpdateUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This method adds one or more users to a group. (asynchronously)
     * This method adds one or more users to a group.
     * @param usersToGroupRequest Users that need to be added to the group (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call addUserToGroupAsync(UsersToGroup usersToGroupRequest, final ApiCallback<UpdateUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = addUserToGroupValidateBeforeCall(usersToGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
